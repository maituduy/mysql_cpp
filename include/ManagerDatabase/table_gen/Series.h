// generated by ./ddl2cpp /home/mxw/Desktop/out/series.sql /home/mxw/Desktop/out/table_gen/Series table
#ifndef TABLE_SERIES_H
#define TABLE_SERIES_H

#include <sqlpp11/table.h>
#include <sqlpp11/data_types.h>
#include <sqlpp11/char_sequence.h>

namespace table
{
  namespace Series_
  {
    struct Pk
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "pk";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T pk;
            T& operator()() { return pk; }
            const T& operator()() const { return pk; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint, sqlpp::tag::must_not_insert, sqlpp::tag::must_not_update, sqlpp::tag::can_be_null>;
    };
    struct StudyFk
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "study_fk";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T studyFk;
            T& operator()() { return studyFk; }
            const T& operator()() const { return studyFk; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint, sqlpp::tag::can_be_null>;
    };
    struct MppsFk
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "mpps_fk";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T mppsFk;
            T& operator()() { return mppsFk; }
            const T& operator()() const { return mppsFk; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint, sqlpp::tag::can_be_null>;
    };
    struct InstCodeFk
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "inst_code_fk";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T instCodeFk;
            T& operator()() { return instCodeFk; }
            const T& operator()() const { return instCodeFk; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint, sqlpp::tag::can_be_null>;
    };
    struct SeriesIuid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "series_iuid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T seriesIuid;
            T& operator()() { return seriesIuid; }
            const T& operator()() const { return seriesIuid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::require_insert>;
    };
    struct SeriesNo
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "series_no";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T seriesNo;
            T& operator()() { return seriesNo; }
            const T& operator()() const { return seriesNo; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct Modality
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "modality";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T modality;
            T& operator()() { return modality; }
            const T& operator()() const { return modality; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct BodyPart
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "body_part";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T bodyPart;
            T& operator()() { return bodyPart; }
            const T& operator()() const { return bodyPart; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct Laterality
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "laterality";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T laterality;
            T& operator()() { return laterality; }
            const T& operator()() const { return laterality; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct SeriesDesc
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "series_desc";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T seriesDesc;
            T& operator()() { return seriesDesc; }
            const T& operator()() const { return seriesDesc; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct Institution
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "institution";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T institution;
            T& operator()() { return institution; }
            const T& operator()() const { return institution; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct StationName
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "station_name";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T stationName;
            T& operator()() { return stationName; }
            const T& operator()() const { return stationName; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct Department
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "department";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T department;
            T& operator()() { return department; }
            const T& operator()() const { return department; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct PerfPhysician
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "perf_physician";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T perfPhysician;
            T& operator()() { return perfPhysician; }
            const T& operator()() const { return perfPhysician; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct PerfPhysFnSx
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "perf_phys_fn_sx";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T perfPhysFnSx;
            T& operator()() { return perfPhysFnSx; }
            const T& operator()() const { return perfPhysFnSx; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct PerfPhysGnSx
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "perf_phys_gn_sx";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T perfPhysGnSx;
            T& operator()() { return perfPhysGnSx; }
            const T& operator()() const { return perfPhysGnSx; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct PerfPhysIName
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "perf_phys_i_name";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T perfPhysIName;
            T& operator()() { return perfPhysIName; }
            const T& operator()() const { return perfPhysIName; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct PerfPhysPName
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "perf_phys_p_name";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T perfPhysPName;
            T& operator()() { return perfPhysPName; }
            const T& operator()() const { return perfPhysPName; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct PpsStart
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "pps_start";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T ppsStart;
            T& operator()() { return ppsStart; }
            const T& operator()() const { return ppsStart; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::time_point, sqlpp::tag::can_be_null>;
    };
    struct PpsIuid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "pps_iuid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T ppsIuid;
            T& operator()() { return ppsIuid; }
            const T& operator()() const { return ppsIuid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct SeriesCustom1
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "series_custom1";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T seriesCustom1;
            T& operator()() { return seriesCustom1; }
            const T& operator()() const { return seriesCustom1; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct SeriesCustom2
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "series_custom2";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T seriesCustom2;
            T& operator()() { return seriesCustom2; }
            const T& operator()() const { return seriesCustom2; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct SeriesCustom3
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "series_custom3";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T seriesCustom3;
            T& operator()() { return seriesCustom3; }
            const T& operator()() const { return seriesCustom3; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct NumInstances
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "num_instances";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T numInstances;
            T& operator()() { return numInstances; }
            const T& operator()() const { return numInstances; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
    struct SrcAet
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "src_aet";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T srcAet;
            T& operator()() { return srcAet; }
            const T& operator()() const { return srcAet; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct ExtRetrAet
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "ext_retr_aet";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T extRetrAet;
            T& operator()() { return extRetrAet; }
            const T& operator()() const { return extRetrAet; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct RetrieveAets
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "retrieve_aets";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T retrieveAets;
            T& operator()() { return retrieveAets; }
            const T& operator()() const { return retrieveAets; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct FilesetIuid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "fileset_iuid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T filesetIuid;
            T& operator()() { return filesetIuid; }
            const T& operator()() const { return filesetIuid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct FilesetId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "fileset_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T filesetId;
            T& operator()() { return filesetId; }
            const T& operator()() const { return filesetId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct Availability
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "availability";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T availability;
            T& operator()() { return availability; }
            const T& operator()() const { return availability; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct SeriesStatus
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "series_status";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T seriesStatus;
            T& operator()() { return seriesStatus; }
            const T& operator()() const { return seriesStatus; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct CreatedTime
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "created_time";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T createdTime;
            T& operator()() { return createdTime; }
            const T& operator()() const { return createdTime; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::time_point, sqlpp::tag::can_be_null>;
    };
    struct UpdatedTime
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "updated_time";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T updatedTime;
            T& operator()() { return updatedTime; }
            const T& operator()() const { return updatedTime; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::time_point, sqlpp::tag::can_be_null>;
    };
    struct SeriesAttrs
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "series_attrs";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T seriesAttrs;
            T& operator()() { return seriesAttrs; }
            const T& operator()() const { return seriesAttrs; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::blob, sqlpp::tag::can_be_null>;
    };
  } // namespace Series_

  struct Series: sqlpp::table_t<Series,
               Series_::Pk,
               Series_::StudyFk,
               Series_::MppsFk,
               Series_::InstCodeFk,
               Series_::SeriesIuid,
               Series_::SeriesNo,
               Series_::Modality,
               Series_::BodyPart,
               Series_::Laterality,
               Series_::SeriesDesc,
               Series_::Institution,
               Series_::StationName,
               Series_::Department,
               Series_::PerfPhysician,
               Series_::PerfPhysFnSx,
               Series_::PerfPhysGnSx,
               Series_::PerfPhysIName,
               Series_::PerfPhysPName,
               Series_::PpsStart,
               Series_::PpsIuid,
               Series_::SeriesCustom1,
               Series_::SeriesCustom2,
               Series_::SeriesCustom3,
               Series_::NumInstances,
               Series_::SrcAet,
               Series_::ExtRetrAet,
               Series_::RetrieveAets,
               Series_::FilesetIuid,
               Series_::FilesetId,
               Series_::Availability,
               Series_::SeriesStatus,
               Series_::CreatedTime,
               Series_::UpdatedTime,
               Series_::SeriesAttrs>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "series";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T series;
        T& operator()() { return series; }
        const T& operator()() const { return series; }
      };
    };
  };
} // namespace table
#endif
