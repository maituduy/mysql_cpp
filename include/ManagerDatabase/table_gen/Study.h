// generated by ./ddl2cpp /home/mxw/Desktop/out/study.sql /home/mxw/Desktop/out/table_gen/Study table
#ifndef TABLE_STUDY_H
#define TABLE_STUDY_H

#include <sqlpp11/table.h>
#include <sqlpp11/data_types.h>
#include <sqlpp11/char_sequence.h>

namespace table
{
  namespace Study_
  {
    struct Pk
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "pk";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T pk;
            T& operator()() { return pk; }
            const T& operator()() const { return pk; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint, sqlpp::tag::must_not_insert, sqlpp::tag::must_not_update, sqlpp::tag::can_be_null>;
    };
    struct PatientFk
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "patient_fk";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T patientFk;
            T& operator()() { return patientFk; }
            const T& operator()() const { return patientFk; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint, sqlpp::tag::can_be_null>;
    };
    struct AccnoIssuerFk
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "accno_issuer_fk";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T accnoIssuerFk;
            T& operator()() { return accnoIssuerFk; }
            const T& operator()() const { return accnoIssuerFk; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint, sqlpp::tag::can_be_null>;
    };
    struct StudyIuid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "study_iuid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T studyIuid;
            T& operator()() { return studyIuid; }
            const T& operator()() const { return studyIuid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::require_insert>;
    };
    struct StudyId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "study_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T studyId;
            T& operator()() { return studyId; }
            const T& operator()() const { return studyId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct StudyDatetime
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "study_datetime";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T studyDatetime;
            T& operator()() { return studyDatetime; }
            const T& operator()() const { return studyDatetime; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::time_point, sqlpp::tag::can_be_null>;
    };
    struct AccessionNo
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "accession_no";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T accessionNo;
            T& operator()() { return accessionNo; }
            const T& operator()() const { return accessionNo; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct RefPhysician
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "ref_physician";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T refPhysician;
            T& operator()() { return refPhysician; }
            const T& operator()() const { return refPhysician; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct RefPhysFnSx
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "ref_phys_fn_sx";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T refPhysFnSx;
            T& operator()() { return refPhysFnSx; }
            const T& operator()() const { return refPhysFnSx; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct RefPhysGnSx
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "ref_phys_gn_sx";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T refPhysGnSx;
            T& operator()() { return refPhysGnSx; }
            const T& operator()() const { return refPhysGnSx; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct RefPhysIName
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "ref_phys_i_name";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T refPhysIName;
            T& operator()() { return refPhysIName; }
            const T& operator()() const { return refPhysIName; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct RefPhysPName
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "ref_phys_p_name";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T refPhysPName;
            T& operator()() { return refPhysPName; }
            const T& operator()() const { return refPhysPName; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct StudyDesc
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "study_desc";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T studyDesc;
            T& operator()() { return studyDesc; }
            const T& operator()() const { return studyDesc; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct StudyCustom1
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "study_custom1";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T studyCustom1;
            T& operator()() { return studyCustom1; }
            const T& operator()() const { return studyCustom1; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct StudyCustom2
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "study_custom2";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T studyCustom2;
            T& operator()() { return studyCustom2; }
            const T& operator()() const { return studyCustom2; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct StudyCustom3
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "study_custom3";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T studyCustom3;
            T& operator()() { return studyCustom3; }
            const T& operator()() const { return studyCustom3; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct StudyStatusId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "study_status_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T studyStatusId;
            T& operator()() { return studyStatusId; }
            const T& operator()() const { return studyStatusId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct ModsInStudy
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "mods_in_study";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T modsInStudy;
            T& operator()() { return modsInStudy; }
            const T& operator()() const { return modsInStudy; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct CuidsInStudy
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "cuids_in_study";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T cuidsInStudy;
            T& operator()() { return cuidsInStudy; }
            const T& operator()() const { return cuidsInStudy; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct NumSeries
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "num_series";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T numSeries;
            T& operator()() { return numSeries; }
            const T& operator()() const { return numSeries; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct NumInstances
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "num_instances";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T numInstances;
            T& operator()() { return numInstances; }
            const T& operator()() const { return numInstances; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct ExtRetrAet
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "ext_retr_aet";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T extRetrAet;
            T& operator()() { return extRetrAet; }
            const T& operator()() const { return extRetrAet; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct RetrieveAets
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "retrieve_aets";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T retrieveAets;
            T& operator()() { return retrieveAets; }
            const T& operator()() const { return retrieveAets; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct FilesetIuid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "fileset_iuid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T filesetIuid;
            T& operator()() { return filesetIuid; }
            const T& operator()() const { return filesetIuid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct FilesetId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "fileset_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T filesetId;
            T& operator()() { return filesetId; }
            const T& operator()() const { return filesetId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct Availability
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "availability";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T availability;
            T& operator()() { return availability; }
            const T& operator()() const { return availability; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct StudyStatus
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "study_status";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T studyStatus;
            T& operator()() { return studyStatus; }
            const T& operator()() const { return studyStatus; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct CheckedTime
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "checked_time";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T checkedTime;
            T& operator()() { return checkedTime; }
            const T& operator()() const { return checkedTime; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::time_point, sqlpp::tag::can_be_null>;
    };
    struct UpdatedTime
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "updated_time";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T updatedTime;
            T& operator()() { return updatedTime; }
            const T& operator()() const { return updatedTime; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::time_point, sqlpp::tag::can_be_null>;
    };
    struct CreatedTime
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "created_time";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T createdTime;
            T& operator()() { return createdTime; }
            const T& operator()() const { return createdTime; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::time_point, sqlpp::tag::can_be_null>;
    };
    struct StudyAttrs
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "study_attrs";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T studyAttrs;
            T& operator()() { return studyAttrs; }
            const T& operator()() const { return studyAttrs; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::blob, sqlpp::tag::can_be_null>;
    };
  } // namespace Study_

  struct Study: sqlpp::table_t<Study,
               Study_::Pk,
               Study_::PatientFk,
               Study_::AccnoIssuerFk,
               Study_::StudyIuid,
               Study_::StudyId,
               Study_::StudyDatetime,
               Study_::AccessionNo,
               Study_::RefPhysician,
               Study_::RefPhysFnSx,
               Study_::RefPhysGnSx,
               Study_::RefPhysIName,
               Study_::RefPhysPName,
               Study_::StudyDesc,
               Study_::StudyCustom1,
               Study_::StudyCustom2,
               Study_::StudyCustom3,
               Study_::StudyStatusId,
               Study_::ModsInStudy,
               Study_::CuidsInStudy,
               Study_::NumSeries,
               Study_::NumInstances,
               Study_::ExtRetrAet,
               Study_::RetrieveAets,
               Study_::FilesetIuid,
               Study_::FilesetId,
               Study_::Availability,
               Study_::StudyStatus,
               Study_::CheckedTime,
               Study_::UpdatedTime,
               Study_::CreatedTime,
               Study_::StudyAttrs>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "study";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T study;
        T& operator()() { return study; }
        const T& operator()() const { return study; }
      };
    };
  };
} // namespace table
#endif
