// generated by ./ddl2cpp /home/mxw/Desktop/out/ae.sql /home/mxw/Desktop/out/table_gen/Ae table
#ifndef TABLE_AE_H
#define TABLE_AE_H

#include <sqlpp11/table.h>
#include <sqlpp11/data_types.h>
#include <sqlpp11/char_sequence.h>

namespace table
{
  namespace Ae_
  {
    struct Pk
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "pk";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T pk;
            T& operator()() { return pk; }
            const T& operator()() const { return pk; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint, sqlpp::tag::must_not_insert, sqlpp::tag::must_not_update, sqlpp::tag::can_be_null>;
    };
    struct Aet
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "aet";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T aet;
            T& operator()() { return aet; }
            const T& operator()() const { return aet; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::require_insert>;
    };
    struct Hostname
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "hostname";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T hostname;
            T& operator()() { return hostname; }
            const T& operator()() const { return hostname; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::require_insert>;
    };
    struct Port
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "port";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T port;
            T& operator()() { return port; }
            const T& operator()() const { return port; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
  } // namespace Ae_

  struct Ae: sqlpp::table_t<Ae,
               Ae_::Pk,
               Ae_::Aet,
               Ae_::Hostname,
               Ae_::Port>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "ae";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T ae;
        T& operator()() { return ae; }
        const T& operator()() const { return ae; }
      };
    };
  };
} // namespace table
#endif
