// generated by ./ddl2cpp /home/mxw/Desktop/out/partitions.sql /home/mxw/Desktop/out/table_gen/Partitions table
#ifndef TABLE_PARTITIONS_H
#define TABLE_PARTITIONS_H

#include <sqlpp11/table.h>
#include <sqlpp11/data_types.h>
#include <sqlpp11/char_sequence.h>

namespace table
{
  namespace Partitions_
  {
    struct Pk
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "pk";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T pk;
            T& operator()() { return pk; }
            const T& operator()() const { return pk; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::must_not_insert, sqlpp::tag::must_not_update, sqlpp::tag::can_be_null>;
    };
    struct ParName
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "par_name";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T parName;
            T& operator()() { return parName; }
            const T& operator()() const { return parName; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct NumRep
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "num_rep";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T numRep;
            T& operator()() { return numRep; }
            const T& operator()() const { return numRep; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
    struct NumToken
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "num_token";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T numToken;
            T& operator()() { return numToken; }
            const T& operator()() const { return numToken; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
  } // namespace Partitions_

  struct Partitions: sqlpp::table_t<Partitions,
               Partitions_::Pk,
               Partitions_::ParName,
               Partitions_::NumRep,
               Partitions_::NumToken>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "partitions";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T partitions;
        T& operator()() { return partitions; }
        const T& operator()() const { return partitions; }
      };
    };
  };
} // namespace table
#endif
