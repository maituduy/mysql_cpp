// generated by ./ddl2cpp /home/mxw/Desktop/out/files.sql /home/mxw/Desktop/out/table_gen/Files table
#ifndef TABLE_FILES_H
#define TABLE_FILES_H

#include <sqlpp11/table.h>
#include <sqlpp11/data_types.h>
#include <sqlpp11/char_sequence.h>

namespace table
{
  namespace Files_
  {
    struct Pk
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "pk";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T pk;
            T& operator()() { return pk; }
            const T& operator()() const { return pk; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint, sqlpp::tag::must_not_insert, sqlpp::tag::must_not_update, sqlpp::tag::can_be_null>;
    };
    struct InstanceFk
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "instance_fk";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T instanceFk;
            T& operator()() { return instanceFk; }
            const T& operator()() const { return instanceFk; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint, sqlpp::tag::can_be_null>;
    };
    struct FilesystemFk
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "filesystem_fk";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T filesystemFk;
            T& operator()() { return filesystemFk; }
            const T& operator()() const { return filesystemFk; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint, sqlpp::tag::can_be_null>;
    };
    struct Filepath
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "filepath";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T filepath;
            T& operator()() { return filepath; }
            const T& operator()() const { return filepath; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::require_insert>;
    };
    struct FileTsuid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "file_tsuid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T fileTsuid;
            T& operator()() { return fileTsuid; }
            const T& operator()() const { return fileTsuid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::require_insert>;
    };
    struct FileMd5
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "file_md5";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T fileMd5;
            T& operator()() { return fileMd5; }
            const T& operator()() const { return fileMd5; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct FileSize
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "file_size";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T fileSize;
            T& operator()() { return fileSize; }
            const T& operator()() const { return fileSize; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint, sqlpp::tag::can_be_null>;
    };
    struct FileStatus
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "file_status";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T fileStatus;
            T& operator()() { return fileStatus; }
            const T& operator()() const { return fileStatus; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
    struct Md5_checkTime
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "md5_check_time";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T md5_checkTime;
            T& operator()() { return md5_checkTime; }
            const T& operator()() const { return md5_checkTime; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::time_point, sqlpp::tag::can_be_null>;
    };
    struct CreatedTime
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "created_time";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T createdTime;
            T& operator()() { return createdTime; }
            const T& operator()() const { return createdTime; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::time_point, sqlpp::tag::can_be_null>;
    };
  } // namespace Files_

  struct Files: sqlpp::table_t<Files,
               Files_::Pk,
               Files_::InstanceFk,
               Files_::FilesystemFk,
               Files_::Filepath,
               Files_::FileTsuid,
               Files_::FileMd5,
               Files_::FileSize,
               Files_::FileStatus,
               Files_::Md5_checkTime,
               Files_::CreatedTime>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "files";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T files;
        T& operator()() { return files; }
        const T& operator()() const { return files; }
      };
    };
  };
} // namespace table
#endif
