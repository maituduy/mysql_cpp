// generated by ./ddl2cpp /home/mxw/Desktop/out/patient.sql /home/mxw/Desktop/out/table_gen/Patient table
#ifndef TABLE_PATIENT_H
#define TABLE_PATIENT_H

#include <sqlpp11/table.h>
#include <sqlpp11/data_types.h>
#include <sqlpp11/char_sequence.h>

namespace table
{
  namespace Patient_
  {
    struct Pk
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "pk";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T pk;
            T& operator()() { return pk; }
            const T& operator()() const { return pk; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint, sqlpp::tag::must_not_insert, sqlpp::tag::must_not_update, sqlpp::tag::can_be_null>;
    };
    struct MergeFk
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "merge_fk";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T mergeFk;
            T& operator()() { return mergeFk; }
            const T& operator()() const { return mergeFk; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint, sqlpp::tag::can_be_null>;
    };
    struct PatId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "pat_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T patId;
            T& operator()() { return patId; }
            const T& operator()() const { return patId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct PatIdIssuer
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "pat_id_issuer";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T patIdIssuer;
            T& operator()() { return patIdIssuer; }
            const T& operator()() const { return patIdIssuer; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct PatName
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "pat_name";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T patName;
            T& operator()() { return patName; }
            const T& operator()() const { return patName; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct PatFnSx
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "pat_fn_sx";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T patFnSx;
            T& operator()() { return patFnSx; }
            const T& operator()() const { return patFnSx; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct PatGnSx
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "pat_gn_sx";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T patGnSx;
            T& operator()() { return patGnSx; }
            const T& operator()() const { return patGnSx; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct PatIName
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "pat_i_name";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T patIName;
            T& operator()() { return patIName; }
            const T& operator()() const { return patIName; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct PatPName
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "pat_p_name";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T patPName;
            T& operator()() { return patPName; }
            const T& operator()() const { return patPName; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct PatBirthdate
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "pat_birthdate";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T patBirthdate;
            T& operator()() { return patBirthdate; }
            const T& operator()() const { return patBirthdate; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct PatSex
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "pat_sex";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T patSex;
            T& operator()() { return patSex; }
            const T& operator()() const { return patSex; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct PatCustom1
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "pat_custom1";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T patCustom1;
            T& operator()() { return patCustom1; }
            const T& operator()() const { return patCustom1; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct PatCustom2
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "pat_custom2";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T patCustom2;
            T& operator()() { return patCustom2; }
            const T& operator()() const { return patCustom2; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct PatCustom3
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "pat_custom3";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T patCustom3;
            T& operator()() { return patCustom3; }
            const T& operator()() const { return patCustom3; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct UpdatedTime
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "updated_time";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T updatedTime;
            T& operator()() { return updatedTime; }
            const T& operator()() const { return updatedTime; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::time_point, sqlpp::tag::can_be_null>;
    };
    struct CreatedTime
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "created_time";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T createdTime;
            T& operator()() { return createdTime; }
            const T& operator()() const { return createdTime; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::time_point, sqlpp::tag::can_be_null>;
    };
    struct PatAttrs
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "pat_attrs";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T patAttrs;
            T& operator()() { return patAttrs; }
            const T& operator()() const { return patAttrs; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::blob, sqlpp::tag::can_be_null>;
    };
  } // namespace Patient_

  struct Patient: sqlpp::table_t<Patient,
               Patient_::Pk,
               Patient_::MergeFk,
               Patient_::PatId,
               Patient_::PatIdIssuer,
               Patient_::PatName,
               Patient_::PatFnSx,
               Patient_::PatGnSx,
               Patient_::PatIName,
               Patient_::PatPName,
               Patient_::PatBirthdate,
               Patient_::PatSex,
               Patient_::PatCustom1,
               Patient_::PatCustom2,
               Patient_::PatCustom3,
               Patient_::UpdatedTime,
               Patient_::CreatedTime,
               Patient_::PatAttrs>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "patient";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T patient;
        T& operator()() { return patient; }
        const T& operator()() const { return patient; }
      };
    };
  };
} // namespace table
#endif
